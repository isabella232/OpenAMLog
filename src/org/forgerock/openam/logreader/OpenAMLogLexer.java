/* The following code was generated by JFlex 1.4.3 on 10/11/14 3:46 PM */

package org.forgerock.openam.logreader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.forgerock.openam.logreader.psi.OpenAMLogTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/11/14 3:46 PM from the specification file
 * <tt>/Users/qcastel/Development/intellij plugin dev/OpenAMLogPlugin/src/org/forgerock/openam/logreader/OpenAMLogV2.flex</tt>
 */
class OpenAMLogLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAIT_DATE = 6;
  public static final int WAIT_DEBUG_NAME = 2;
  public static final int WAIT_THREAD_NAME = 10;
  public static final int WAIT_SEPARATOR_BETWEEN_DATE_AND_THREAD_NAME = 8;
  public static final int WAIT_SEPARATOR_BETWEEN_DEBUG_NAME_AND_DATE = 4;
  public static final int YYINITIAL = 0;
  public static final int WAIT_LOG_VALUE = 14;
  public static final int WAIT_END_LINE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\4\1\0"+
    "\1\4\13\0\1\11\12\6\1\5\2\0\1\0\3\0\1\7\13\0"+
    "\1\10\2\0\1\7\13\0\1\0\uffa3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\2\0\1\3\2\0\2\3\2\0"+
    "\1\3\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\2\0\1\3\2\0\1\3\2\0\1\3\2\0"+
    "\1\3\1\11\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\12\0\24\0\36\0\50\0\62\0\74\0\106"+
    "\0\120\0\132\0\144\0\156\0\132\0\170\0\132\0\202"+
    "\0\132\0\214\0\132\0\120\0\226\0\240\0\252\0\264"+
    "\0\276\0\310\0\322\0\334\0\346\0\360\0\372\0\u0104"+
    "\0\u010e\0\u0118\0\u0122\0\u012c\0\u0136\0\u0140\0\u014a\0\u0154"+
    "\0\u015e\0\u0168\0\u0172\0\u017c\0\u0186\0\u0190\0\u019a\0\u01a4"+
    "\0\u01ae\0\u01b8\0\u01c2\0\u01cc\0\u01d6\0\u01e0\0\u01ea\0\u01f4"+
    "\0\u01fe\0\u0208\0\u0212\0\u021c\0\u0226\0\u0230\0\u023a\0\u0244"+
    "\0\u024e\0\u0258\0\u0262\0\u026c\0\u0276\0\u0280\0\u028a\0\u0294"+
    "\0\u029e\0\u02a8\0\u02b2\0\u02bc\0\u02c6\0\u02d0\0\u02da\0\u02e4"+
    "\0\u02ee\0\u02f8\0\u0302\0\u030c\0\u0316\0\u0320\0\u032a\0\u0334"+
    "\0\u033e\0\u0348\0\u0352\0\u035c\0\u0366\0\u0370\0\u037a\0\u0384"+
    "\0\u038e\0\u0398\0\u03a2\0\u03ac\0\u03b6\0\u03a2\0\u03c0\0\u03ca"+
    "\0\u03d4\0\u03de\0\u03e8\0\u03f2\0\u03e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\11\1\14\1\15\4\11\1\16"+
    "\1\0\3\16\1\15\4\16\1\15\1\0\3\15\1\17"+
    "\5\15\1\0\4\15\1\20\4\15\1\0\3\15\1\21"+
    "\4\15\1\22\1\0\3\22\1\15\4\22\1\15\1\23"+
    "\11\15\1\0\10\15\1\24\1\0\3\24\1\25\4\24"+
    "\12\0\1\24\1\12\3\24\1\25\4\24\1\14\1\0"+
    "\1\24\2\14\1\26\4\14\1\16\1\0\3\16\1\0"+
    "\4\16\6\0\1\27\3\0\1\22\1\0\3\22\1\0"+
    "\4\22\6\0\1\30\3\0\1\31\2\0\3\31\1\32"+
    "\3\31\11\0\1\33\6\0\1\34\3\0\1\31\2\0"+
    "\10\31\2\0\3\31\1\35\3\31\6\0\1\36\14\0"+
    "\1\37\1\31\2\0\6\31\1\40\6\0\1\41\11\0"+
    "\1\42\3\0\1\31\2\0\3\31\1\43\3\31\11\0"+
    "\1\44\6\0\1\45\3\0\1\31\2\0\3\31\1\46"+
    "\3\31\6\0\1\47\14\0\1\50\1\31\2\0\6\31"+
    "\1\51\6\0\1\52\11\0\1\53\3\0\1\31\2\0"+
    "\3\31\1\54\3\31\6\0\1\55\11\0\1\56\3\0"+
    "\1\31\2\0\3\31\1\57\3\31\6\0\1\60\11\0"+
    "\1\61\3\0\1\31\2\0\3\31\1\62\3\31\3\0"+
    "\1\63\14\0\1\64\3\0\1\31\2\0\3\31\1\65"+
    "\3\31\6\0\1\66\6\0\1\67\6\0\1\31\2\0"+
    "\1\70\6\31\6\0\1\71\11\0\1\72\3\0\1\31"+
    "\2\0\3\31\1\73\3\31\5\0\1\74\12\0\1\75"+
    "\3\0\1\31\2\0\3\31\1\76\3\31\6\0\1\77"+
    "\10\0\1\100\4\0\1\31\2\0\2\31\1\101\4\31"+
    "\6\0\1\102\11\0\1\103\3\0\1\31\2\0\3\31"+
    "\1\104\3\31\5\0\1\105\12\0\1\106\3\0\1\31"+
    "\2\0\3\31\1\107\3\31\6\0\1\110\10\0\1\111"+
    "\4\0\1\31\2\0\2\31\1\112\4\31\6\0\1\113"+
    "\11\0\1\114\3\0\1\31\2\0\3\31\1\115\3\31"+
    "\5\0\1\116\12\0\1\117\3\0\1\31\2\0\3\31"+
    "\1\120\3\31\6\0\1\121\10\0\1\122\4\0\1\31"+
    "\2\0\2\31\1\123\4\31\6\0\1\124\11\0\1\125"+
    "\3\0\1\31\2\0\3\31\1\126\3\31\6\0\1\127"+
    "\11\0\1\130\3\0\1\31\2\0\3\31\1\131\3\31"+
    "\3\0\1\132\14\0\1\133\3\0\1\31\2\0\3\31"+
    "\1\134\3\31\7\0\1\135\5\0\1\136\6\0\1\31"+
    "\2\0\1\137\6\31\10\0\1\140\10\0\1\141\2\0"+
    "\1\31\2\0\4\31\1\142\2\31\3\0\1\143\16\0"+
    "\1\144\1\0\1\31\2\0\5\31\1\145\1\31\5\146"+
    "\1\0\4\146\3\0\1\147\6\0\1\31\2\0\1\150"+
    "\6\31\5\151\1\0\4\151\1\152\2\151\2\152\1\31"+
    "\4\152\5\151\1\153\4\151\1\152\2\151\2\152\1\154"+
    "\4\152\1\155\1\0\3\155\1\0\4\155\1\154\1\0"+
    "\1\155\2\154\1\31\4\154";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\0\1\1\2\0\2\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  OpenAMLogLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  OpenAMLogLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 52) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(WAIT_SEPARATOR_BETWEEN_DATE_AND_THREAD_NAME); return OpenAMLogTypes.DATE;
          }
        case 11: break;
        case 5: 
          { yybegin(WAIT_DATE); return OpenAMLogTypes.SEPARATOR;
          }
        case 12: break;
        case 2: 
          { return OpenAMLogTypes.CRLF;
          }
        case 13: break;
        case 10: 
          { yypushback(yytext().length()); yybegin(WAIT_DEBUG_NAME);
          }
        case 14: break;
        case 7: 
          { yybegin(WAIT_END_LINE); return OpenAMLogTypes.THREAD_NAME;
          }
        case 15: break;
        case 4: 
          { yybegin(WAIT_SEPARATOR_BETWEEN_DEBUG_NAME_AND_DATE); return OpenAMLogTypes.DEBUG_NAME;
          }
        case 16: break;
        case 6: 
          { yybegin(WAIT_THREAD_NAME); return OpenAMLogTypes.SEPARATOR;
          }
        case 17: break;
        case 8: 
          { yybegin(YYINITIAL); return OpenAMLogTypes.CRLF;
          }
        case 18: break;
        case 3: 
          { yybegin(YYINITIAL); return OpenAMLogTypes.COMMENT;
          }
        case 19: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 20: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
